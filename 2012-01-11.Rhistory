drv <- dbDriver("SQLite")
import dbDriver
R CMD INSTALL RSQLite-<version>.tar.gz
R CMD INSTALL RSQLite_0.11.1.tgz
R CMD INSTALL RSQLite_0.11.1.tar.gz
drv <- dbDriver("SQLite")
library("RSQLite")
library("DBI")
library("RSQLite")
drv <- dbDriver("SQLite")
tfile <- tempfile()
con <- dbConnect(drv, dbname = '/Users/laura/Sandbox/msr-2012/data/db.sqlite3')
data(AndroidBugs)
drv <- dbDriver("SQLite")
tfile <- tempfile()
con <- dbConnect(drv, dbname = '/Users/laura/Sandbox/msr-2012/data/db.sqlite3')
data(bugs)
drv <- dbDriver("SQLite")
tfile <- tempfile()
con <- dbConnect(drv, dbname = tfile)
help data
?data
data()
drv <- dbDriver("SQLite")
tfile <- tempfile()
con <- dbConnect(drv, dbname = '/Users/laura/Sandbox/msr-2012/data/db.sqlite3')
dbGetQuery(con, "select count(*) from bugs")[1, ]
dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts
order by frequencies desc;")[1, ]
dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts
order by frequencies desc;")
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts
order by frequencies desc;")
comment_frequencies
?histogram
?hist
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts;")
comment_frequencies
hist(comment_frequencies[,2])
?plot
plot(comment_frequencies[,1], comment_frequencies[,2])
plot(comment_frequencies[,1], comment_frequencies[,2], type="s"")
plot(comment_frequencies[,1], comment_frequencies[,2], type="s)
plot(comment_frequencies[,1], comment_frequencies[,2], type="s")
plot(comment_frequencies[,1], comment_frequencies[,2], type="S")
plot(comment_frequencies[,1], comment_frequencies[,2], type="s")
plot(comment_frequencies[,1], comment_frequencies[,2], type="s", main="Comment frequencies in a bug", xlab= "Number of comments in a bug", ylab="Frequency of such bugs")
comment_frequencies <- dbGetQuery(con, "select bug_id, count(bug_id) counts
from comments
group by bug_id")
comment_frequencies
hist(comment_frequencies[,2])
comment_frequencies <- dbGetQuery(con, "count(bug_id) counts
from comments
group by bug_id")
comment_frequencies <- dbGetQuery(con, "count(bug_id)
from comments
group by bug_id")
comment_frequencies <- dbGetQuery(con, "select count(bug_id) counts
from comments
group by bug_id")
comment_frequencies
hist(comment_frequencies[,1])
hist(comment_frequencies[,1])
?hist
comment_frequencies <- dbGetQuery(con, "select max(count(bug_id))
from comments
group by bug_id")
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts;")
comment_frequencies
comment_frequencies <- dbGetQuery(con, "select count(bug_id) counts
from comments
group by bug_id")
hist(comment_frequencies[,1], breaks=25)
sum(comment_frequencies[,2])
?sum
comment_frequencies
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts;")
sum(comment_frequencies[,2])
comment_frequencies
?plot
comment_frequencies <- dbGetQuery(con, "select count(bug_id)
from comments
group by bug_id)
group by counts;")
comment_frequencies <- dbGetQuery(con, "select count(bug_id)
from comments where
group by bug_id)
group by counts;")
x <- dbGetQuery(con, "select count(bug_id)")
x <- dbGetQuery(con, "select count(bug_id) from comments where count(bug_id)=0 group by bug_id")
x <- dbGetQuery(con, "select bug_id from comments where count(bug_id)=0 group by bug_id")
comment_frequencies
plot(comment_frequencies[,1], comment_frequencies[,2])
?plot
methods(plot)
?plot.histogram
plot(comment_frequencies, freq = equidist, density = NULL, angle = 45,
col = NULL, border = par("fg"), lty = NULL,
main = paste("Histogram of",
paste(x$xname, collapse="\n")),
sub = NULL, xlab = x$xname, ylab,
xlim = range(x$breaks), ylim = NULL,
axes = TRUE, labels = FALSE, add = FALSE,
ann = TRUE, ...)
plot(comment_frequencies, freq = equidist, density = NULL, angle = 45,
col = NULL, border = par("fg"), lty = NULL,
main = paste("Histogram of",
paste(x$xname, collapse="\n")),
sub = NULL, xlab = x$xname, ylab,
xlim = range(x$breaks), ylim = NULL,
axes = TRUE, labels = FALSE, add = FALSE,
ann = TRUE)
plot(comment_frequencies, freq = equidist, density = NULL, angle = 45,
col = NULL, border = par("fg"), lty = NULL,
main = paste("Histogram of",
paste(comment_frequencies$xname, collapse="\n")),
sub = NULL, xlab = comment_frequencies$xname, ylab,
xlim = range(comment_frequencies$breaks), ylim = NULL,
axes = TRUE, labels = FALSE, add = FALSE,
ann = TRUE)
?plot
plot(comment_frequencies[,1], comment_frequencies[,2], type="h")
?plot
plot(comment_frequencies[,1], comment_frequencies[,2], type="l")
plot(comment_frequencies[,1], comment_frequencies[,2], type="o")
plot(comment_frequencies[,1], comment_frequencies[,2], type="b")
plot(comment_frequencies[,1], comment_frequencies[,2], type="S")
plot(comment_frequencies[,1], comment_frequencies[,2], type="S", xlab="Number of comments in a bug", ylab="Frequency of bugs", main="Comment frequencies in a bug")
?plot
par()
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequenciesfrom
+ (select bug_id, count(bug_id) counts
+ from comments
+ group by bug_id)
+ group by counts;")
comment_frequencies <- dbGetQuery(con, "select max(count(counts))
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)")
comment_frequencies <- dbGetQuery(con, "select max(counts) from select bug_id, count(bug_id) counts
from comments
group by bug_id")
comment_frequencies <- dbGetQuery(con, "select max(counts) from (select bug_id, count(bug_id) counts
from comments
group by bug_id)")
plot(comment_frequencies[,1], comment_frequencies[,2], type="S", xlab="Number of comments in a bug", ylab="Frequency of bugs")
comment_frequencies
omment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts;")
comment_frequencies <- dbGetQuery(con, "select counts, count(counts) frequencies
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)
group by counts;")
comment_frequencies
plot(comment_frequencies[,1], comment_frequencies[,2], type="S", xlab="Number of comments in a bug", ylab="Frequency of bugs")
?percentile
quantile(comment_frequencies, 0.05)
quantile(comment_frequencies[,2], 0.05)
quantile(comment_frequencies[,2], 0.95)
comment_frequencies <- dbGetQuery(con, "select sum(count(counts))
+ from
+ (select bug_id, count(bug_id) counts
+ from comments
+ group by bug_id)
+ group by counts;")
comment_frequencies <- dbGetQuery(con, "select sum(count(counts))
+ from
+ (select bug_id, count(bug_id) counts
+ from comments
+ group by bug_id)")
comment_frequencies <- dbGetQuery(con, "select sum(count(counts))
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)")
comment_frequencies <- dbGetQuery(con, "select sum(count(counts))
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id)")
comment_frequencies <- dbGetQuery(con, "select sum(count(counts))
from
(select bug_id, count(bug_id) counts
from comments
group by bug_id) group by bug_id")
comment_frequencies
sum(comment_frequencies[1:2,2])
sum(comment_frequencies[1:5,2])
sum(comment_frequencies[1:5,2])/sum(comment_frequencies[,2])
resolving_times <- dbGetQuery(con, "select bug_id, opened_date, closed_on, julianday(closed_on) - julianday(opened_date)
from bugs")
resolving_times
resolving_times <- dbGetQuery(con, "select bug_id, opened_date, closed_on, julianday(closed_on) - julianday(opened_date) where closed_on not null
from bugs")
resolving_times <- dbGetQuery(con, "select bug_id, opened_date, closed_on, julianday(closed_on) - julianday(opened_date)
from bugs where closed_on not null")
resolving_times
resolving_times <- dbGetQuery(con, "select julianday(closed_on) - julianday(opened_date)
from bugs where closed_on not null")
resolving_times
resolving_times
min(resolving_times[,2])
min(resolving_times)
max(resolving_times)
avg(resolving_times)
mean(resolving_times)
average(resolving_times)
?mean
resolving_times
dim(resolving_times)
mean(resolving_times)
colMeans(resolving_times)
hist(resolving_times)
type(resolving_times)
is.numeric(resolving_times)
as.numeric(resolving_times)
resolving_times
resolving_times[1]
resolving_times[[1]]
res_times <- resolving_times[[1]]
mean(res_times)
hist(res_times)
hist(res_times, breaks=28)
max(res_times)
hist(res_times, breaks=28)
hist(res_times, breaks=28,main="")
hist(res_times, breaks=28,main="",xlab="Resolving time in days")
hist(res_times, breaks=28,main="",xlab="Resolving time in days", xlim=c(1:800))
hist(res_times, breaks=28,main="",xlab="Resolving time in days", xlim=c800)
hist(res_times, breaks=28,main="",xlab="Resolving time in days", xlim=800)
hist(res_times, breaks=28,main="",xlab="Resolving time in days")
times_comments <- dbGetQuery(con, "select bugs.bug_id, count(bugs.bug_id) counts, julianday(closed_on) - julianday(opened_date) time
from comments, bugs
where bugs.bug_id = comments.bug_id and closed_on not null
group by bugs.bug_id;")
times_comments
times_comments <- dbGetQuery(con, "select count(bugs.bug_id) counts, julianday(closed_on) - julianday(opened_date) time
from comments, bugs
where bugs.bug_id = comments.bug_id and closed_on not null
group by bugs.bug_id;")
times_comments
times_comments
plot(times_comments[,1], times_comments[,2])
plot(times_comments[,1], times_comments[,2], xlab("Number of comments", ylab="Resolving time"))
plot(times_comments[,1], times_comments[,2], xlab"Number of comments", ylab="Resolving time")
plot(times_comments[,1], times_comments[,2], xlab="Number of comments", ylab="Resolving time")
points(times_comments[,1], times_comments[,2], xlab="Number of comments", ylab="Resolving time")
points(times_comments[,1], times_comments[,2], xlab="Number of comments", ylab="Resolving time", type="p")
points(times_comments[,1], times_comments[,2], xlab="Number of comments", ylab="Resolving time", type="p")
plot.new
plot(times_comments[,1], times_comments[,2], xlab="Number of comments", ylab="Resolving time")
glm(times_comments[,1] ~ times_comments[,2])
glm(times_comments[,2] ~ times_comments[,1])
summary(glm.linear)
glm.linear <- glm(times_comments[,2] ~ times_comments[,1])
summary(glm.linear)
glm.linear.resids <- residuals(glm.linear)
hist(glm.linear.resids)
glm.linear.preds <- fitted.values(glm.linear)
plot(glm.linear.preds, glm.linear.resids)
savehistory("~/Sandbox/msr-2012/2012-01-11.Rhistory")
